%%% references for SciPy 2021 paper

@article{Michaud-Agrawal:2011,
	Abstract = {MDAnalysis is an object-oriented library for structural and temporal analysis of molecular dynamics (MD) simulation trajectories and individual protein structures. It is written in the Python language with some performance-critical code in C. It uses the powerful NumPy package to expose trajectory data as fast and efficient NumPy arrays. It has been tested on systems of millions of particles. Many common file formats of simulation packages including CHARMM, Gromacs, and NAMD and the Protein Data Bank format can be read and written.  Atoms can be selected with a syntax similar to CHARMM's powerful selection commands. MDAnalysis enables both novice and experienced programmers to rapidly write their own analytical tools and access data stored in trajectories in an easily accessible manner that facilitates interactive explorative analysis. MDAnalysis has been tested on and works for most Unix-based platforms such as Linux and Mac OS X. It is freely available under the GNU Public License from http://mdanalysis.googlecode.com.},
	Author = {Michaud-Agrawal, Naveen and Denning, Elizabeth Jane and Woolf, Thomas B. and Beckstein, Oliver},
	Date-Added = {2012-11-16 14:27:26 -0700},
	Date-Modified = {2013-03-25 15:48:20 -0700},
	Doi = {10.1002/jcc.21787},
	Journal = {J Comp Chem},
	Keywords = {MDAnalysis, molecular dynamics (MD) simulation, Python},
	Pages = {2319--2327},
	Title = {{MDAnalysis}: A Toolkit for the Analysis of Molecular Dynamics Simulations},
	Volume = 32,
	Year = 2011,
}


@inproceedings{Gowers:2016,
	Abstract = {MDAnalysis (http://mdanalysis.org) is a library for structural and temporal analysis of molecular dynamics (MD) simulation trajectories and individual protein structures. MD simulations of biological molecules have become an important tool to elucidate the relationship between molecular structure and physiological function. Simulations are performed with highly optimized software packages on HPC resources but most codes generate output trajectories in their own formats so that the development of new trajectory analysis algorithms is confined to specific user communities and widespread adoption and further development is delayed. MDAnalysis addresses this problem by abstracting access to the raw simulation data and presenting a uniform object-oriented Python interface to the user. It thus enables users to rapidly write code that is portable and immediately usable in virtually all biomolecular simulation communities. The user interface and modular design work equally well in complex scripted work flows, as foundations for other packages, and for interactive and rapid prototyping work in IPython / Jupyter notebooks, especially together with molecular visualization provided by nglview and time series analysis with pandas. MDAnalysis is written in Python and Cython and uses NumPy arrays for easy interoperability with the wider scientific Python ecosystem. It is widely used and forms the foundation for more specialized biomolecular simulation tools. MDAnalysis is available under the GNU General Public License v2. },
	Address = {Austin, TX},
	Author = {Gowers, Richard J. and Linke, Max and Barnoud, Jonathan and Reddy, Tyler J. E. and Melo, Manuel N. and Seyler, Sean L. and Dotson, David L and Doma{\'n}ski, Jan and Buchoux, S{\'e}bastien and Kenney, Ian M. and Beckstein, Oliver},
	Booktitle = {{P}roceedings of the 15th {P}ython in {S}cience {C}onference},
	Date-Added = {2016-05-31 22:54:55 +0000},
	Date-Modified = {2018-11-09 01:32:12 -0700},
	Doi = {10.25080/Majora-629e541a-00e},
	Editor = {Benthall, Sebastian and Rostrup, Scott},
	Keywords = {MDAnalysis, Python, SPIDAL},
	Organization = {SciPy},
	Pages = {98--105},
	Title = {{MDAnalysis}: A {Python} package for the Rapid Analysis of Molecular Dynamics Simulations},
	Url = {https://www.mdanalysis.org},
	Year = 2016,
}

@inproceedings{Fan:2019,
	Abstract = {MDAnalysis is an object-oriented Python library to analyze trajectories from molecular dynamics (MD) simulations in many popular formats. With the development of highly optimized MD software packages on high performance computing (HPC) resources, the size of simulation trajectories is growing up to many terabytes in size. However efficient usage of multicore architecture is a challenge for MDAnalysis, which does not yet provide a standard interface for parallel analysis. To address the challenge, we developed PMDA, a Python library that builds upon MDAnalysis to provide parallel analysis algorithms. PMDA parallelizes common analysis algorithms in MDAnalysis through a task-based approach with the Dask library. We implement a simple split-apply-combine scheme for parallel trajectory analysis. The trajectory is split into blocks, analysis is performed separately and in parallel on each block (\textquotedbl{}apply\textquotedbl{}), then results from each block are gathered and combined. PMDA allows one to perform parallel trajectory analysis with pre-defined analysis tasks. In addition, it provides a common interface that makes it easy to create user-defined parallel analysis modules. PMDA supports all schedulers in Dask, and one can run analysis in a distributed fashion on HPC machines, ad-hoc clusters, a single multi-core workstation or a laptop. We tested the performance of PMDA on single node and multiple nodes on a national supercomputer. The results show that parallelization improves the performance of trajectory analysis and, depending on the analysis task, can cut down time to solution from hours to minutes. Although still in alpha stage, it is already used on resources ranging from multi-core laptops to XSEDE supercomputers to speed up analysis of molecular dynamics trajectories. PMDA is available as open source under the GNU General Public License, version 2 and can be easily installed via the pip and conda package managers. },
	Address = {Austin, TX},
	Author = {{S}hujie {F}an and {M}ax {L}inke and {I}oannis {P}araskevakos and {R}ichard {J}. {G}owers and {M}ichael {G}echt and {O}liver {B}eckstein},
	Booktitle = {{P}roceedings of the 18th {P}ython in {S}cience {C}onference},
	Date-Added = {2019-07-23 18:01:45 -0700},
	Date-Modified = {2019-08-23 11:48:50 -0700},
	Doi = {10.25080/Majora-7ddc1dd1-013},
	Editor = {{C}hris {C}alloway and {D}avid {L}ippa and {D}illon {N}iederhut and {D}avid {S}hupe},
	Keywords = {PMDA, MDAnalysis, Parallel algorithms, HPC, SPIDAL},
	Organization = {SciPy},
	Pages = {134 - 142},
	Title = {{PMDA} - {P}arallel {M}olecular {D}ynamics {A}nalysis},
	Year = 2019,
}

@article{Khoshlessan:2020,
	Abstract = {The performance of biomolecular molecular dynamics simulations has steadily increased on modern high-performance computing resources but acceleration of the analysis of the output trajectories has lagged behind so that analyzing simulations is becoming a bottleneck. To close this gap, we studied the performance of trajectory analysis with message passing interface (MPI) parallelization and the Python MDAnalysis library on three different Extreme Science and Engineering Discovery Environment (XSEDE) supercomputers where trajectories were read from a Lustre parallel file system. Strong scaling performance was impeded by stragglers, MPI processes that were slower than the typical process. Stragglers were less prevalent for compute-bound workloads, thus pointing to file reading as a bottleneck for scaling. However, a more complicated picture emerged in which both the computation and the data ingestion exhibited close to ideal strong scaling behavior whereas stragglers were primarily caused by either large MPI communication costs or long times to open the single shared trajectory file. We improved overall strong scaling performance by either subfiling (splitting the trajectory into separate files) or MPI-IO with parallel HDF5 trajectory files. The parallel HDF5 approach resulted in near ideal strong scaling on up to 384 cores (16 nodes), thus reducing trajectory analysis times by two orders of magnitude compared with the serial approach.},
	Author = {Khoshlessan, Mahzad and Paraskevakos, Ioannis and Fox, Geoffrey C. and Jha, Shantenu and Beckstein, Oliver},
	Date-Added = {2020-04-28 16:07:22 -0700},
	Date-Modified = {2020-09-07 11:43:05 -0700},
	Doi = {10.1002/cpe.5789},
	Journal = {Concurrency and Computation: Practice and Experience},
	Keywords = {big data, HDF5, HPC, MDAnalysis, molecular dynamics, MPI, MPI I/O, Python, straggler, trajectory analysis},
	Pages = {e5789},
	Title = {Parallel performance of molecular dynamics trajectory analysis},
	Volume = 32,
	Year = 2020,
}


@article{Buyl:2014,
	Abstract = {We propose a new file format named ``H5MD'' for storing molecular simulation data, such as trajectories of particle positions and velocities, along with thermodynamic observables that are monitored during the course of the simulation. H5MD files are HDF5 (Hierarchical Data Format) files with a specific hierarchy and naming scheme. Thus, H5MD inherits many benefits of HDF5, e.g., structured layout of multi-dimensional datasets, data compression, fast and parallel I/O, and portability across many programming languages and hardware platforms. H5MD files are self-contained, and foster the reproducibility of scientific data and the interchange of data between researchers using different simulation programs and analysis software. In addition, the H5MD specification can serve for other kinds of data (e.g. experimental data) and is extensible to supplemental data, or may be part of an enclosing file structure.},
	Author = {Pierre de Buyl and Peter H. Colberg and Felix H{\"o}fling},
	Date-Added = {2019-01-23 02:45:58 -0700},
	Date-Modified = {2019-01-23 02:45:58 -0700},
	Doi = {10.1016/j.cpc.2014.01.018},
	Issn = {0010-4655},
	Journal = {Computer Physics Communications},
	Keywords = {Molecular simulation, HDF5, H5MD, file format},
	Number = 6,
	Pages = {1546 - 1553},
	Title = {{H5MD}: A structured, efficient, and portable file format for molecular data},
	Volume = 185,
	Year = 2014,
}

@incollection{Collette:2014,
  author =        {Andrew Collette},
  booktitle =     {{Python} and {HDF5}},
  editor =        {Meghan Blanchette and Rachel Roumeliotis},
  publisher =     {O'Reilly Media, Inc., 1005 Gravenstein Highway North,
                   Sebastopol, CA 95472.},
  title =         {Python and HDF5},
  year =          2014,
}


@article{Harris:2020,
	Abstract = {Array programming provides a powerful, compact and expressive syntax for accessing, manipulating and operating on data in vectors, matrices and higher-dimensional arrays. NumPy is the primary array programming library for the Python language. It has an essential role in research analysis pipelines in fields as diverse as physics, chemistry, astronomy, geoscience, biology, psychology, materials science, engineering, finance and economics. For example, in astronomy, NumPy was an important part of the software stack used in the discovery of gravitational waves1 and in the first imaging of a black hole2. Here we review how a few fundamental array concepts lead to a simple and powerful programming paradigm for organizing, exploring and analysing scientific data. NumPy is the foundation upon which the scientific Python ecosystem is constructed. It is so pervasive that several projects, targeting audiences with specialized needs, have developed their own NumPy-like interfaces and array objects. Owing to its central position in the ecosystem, NumPy increasingly acts as an interoperability layer between such array computation libraries and, together with its application programming interface (API), provides a flexible framework to support the next decade of scientific and industrial analysis.},
	Author = {Harris, Charles R and Millman, K Jarrod and van der Walt, St{\'e}fan J and Gommers, Ralf and Virtanen, Pauli and Cournapeau, David and Wieser, Eric and Taylor, Julian and Berg, Sebastian and Smith, Nathaniel J and Kern, Robert and Picus, Matti and Hoyer, Stephan and van Kerkwijk, Marten H and Brett, Matthew and Haldane, Allan and Del R{\'\i}o, Jaime Fern{\'a}ndez and Wiebe, Mark and Peterson, Pearu and G{\'e}rard-Marchant, Pierre and Sheppard, Kevin and Reddy, Tyler and Weckesser, Warren and Abbasi, Hameer and Gohlke, Christoph and Oliphant, Travis E},
	Date-Added = {2021-05-31 12:20:24 -0700},
	Date-Modified = {2021-05-31 12:22:08 -0700},
	Doi = {10.1038/s41586-020-2649-2},
	Journal = {Nature},
	Journal-Full = {Nature},
	Keywords = {python, numpy},
	Mesh = {Computational Biology; Mathematics; Programming Languages; Software Design},
	Month = 09,
	Number = 7825,
	Pages = {357-362},
	Pmc = {PMC7759461},
	Pmid = 32939066,
	Pst = {ppublish},
	Title = {Array programming with NumPy},
	Volume = 585,
	Year = 2020,
}

@article{Virtanen:2020,
	Abstract = {SciPy is an open-source scientific computing library for the Python programming language. Since its initial release in 2001, SciPy has become a de facto standard for leveraging scientific algorithms in Python, with over 600 unique code contributors, thousands of dependent packages, over 100,000 dependent repositories and millions of downloads per year. In this work, we provide an overview of the capabilities and development practices of SciPy 1.0 and highlight some recent technical developments.},
	Author = {Virtanen, Pauli and Gommers, Ralf and Oliphant, Travis E and Haberland, Matt and Reddy, Tyler and Cournapeau, David and Burovski, Evgeni and Peterson, Pearu and Weckesser, Warren and Bright, Jonathan and van der Walt, St{\'e}fan J and Brett, Matthew and Wilson, Joshua and Millman, K Jarrod and Mayorov, Nikolay and Nelson, Andrew R J and Jones, Eric and Kern, Robert and Larson, Eric and Carey, C J and Polat, {\.I}lhan and Feng, Yu and Moore, Eric W and VanderPlas, Jake and Laxalde, Denis and Perktold, Josef and Cimrman, Robert and Henriksen, Ian and Quintero, E A and Harris, Charles R and Archibald, Anne M and Ribeiro, Ant{\^o}nio H and Pedregosa, Fabian and van Mulbregt, Paul and {SciPy 1.0 Contributors}},
	Date-Added = {2021-05-31 12:21:21 -0700},
	Date-Modified = {2021-05-31 12:22:17 -0700},
	Doi = {10.1038/s41592-019-0686-2},
	Journal = {Nat Methods},
	Journal-Full = {Nature methods},
	Keywords = {python, numpy, scipy},
	Mesh = {Algorithms; Computational Biology; Computer Simulation; History, 20th Century; History, 21st Century; Linear Models; Models, Biological; Nonlinear Dynamics; Programming Languages; Signal Processing, Computer-Assisted; Software},
	Month = 03,
	Number = 3,
	Pages = {261-272},
	Pmc = {PMC7056644},
	Pmid = 32015543,
	Pst = {ppublish},
	Title = {SciPy 1.0: fundamental algorithms for scientific computing in Python},
	Volume = 17,
	Year = 2020,
}
